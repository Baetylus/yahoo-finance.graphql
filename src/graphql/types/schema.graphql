type Query {
	finances(symbol: String!): AutogeneratedMainTypeFinance
  insights(symbol: String!): AutogeneratedMainTypeInsights
  recommendations(symbol: String!): AutogeneratedMainTypeRecommendations
}


type Quotes { language: String
  region: String
  quoteType: String
  triggerable: Boolean
  quoteSourceName: String
  sourceInterval: Int
  exchangeTimezoneName: String
  exchangeTimezoneShortName: String
  gmtOffSetMilliseconds: Int
  priceHint: Int
  exchange: String
  marketState: String
  market: String
  shortName: String
  esgPopulated: Boolean
  tradeable: Boolean
  postMarketChangePercent: Float
  postMarketTime: Int
  postMarketPrice: Float
  postMarketChange: Float
  regularMarketChangePercent: Float
  regularMarketPreviousClose: Float
  fullExchangeName: String
  exchangeDataDelayedBy: Int
  regularMarketPrice: Float
  regularMarketTime: Int
  regularMarketChange: Float
  symbol: String }

type Result { count: Int quotes: [Quotes ] }

type FinanceResult { error: String result: [Result ] }

type AutogeneratedMainTypeRecommendations { finance: FinanceResult }


type Sector { innovativeness: Float
  hiring: Float
  sustainability: Float
  insiderSentiments: Float
  earningsReports: Float
  dividends: Float }

type Company { innovativeness: Float
  hiring: Float
  sustainability: Float
  insiderSentiments: Float
  earningsReports: Float
  dividends: Float }

type CompanySnapshot { sectorInfo: String sector: Sector company: Company }

type Reports { id: String
  title: String
  provider: String
  publishedOn: String
  summary: String }

type Recommendation { targetPrice: Int provider: String rating: String }

type Valuation { color: Float
  description: String
  discount: String
  provider: String }

type KeyTechnicals { provider: String
  support: Float
  resistance: Float
  stopLoss: Float }

type TechnicalEvents { provider: String
  shortTerm: String
  midTerm: String
  longTerm: String }

type InstrumentInfo { recommendation: Recommendation
  valuation: Valuation
  keyTechnicals: KeyTechnicals
  technicalEvents: TechnicalEvents }

type Result { symbol: String
  companySnapshot: CompanySnapshot
  reports: [Reports ]
  instrumentInfo: InstrumentInfo }

type Finance { error: String result: Result }

type AutogeneratedMainTypeInsights { finance: Finance }


type Meta { symbol: String start: Int end: Int timeUnit: String }

type ReportedValue { raw: Float fmt: String }

type AnnualDilutedEps { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingSellingGeneralAndAdministration { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualOperatingExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingNetIncomeContinuousOperations { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualEbitda { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingOperatingExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualOperatingIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingGrossProfit { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualOtherIncomeExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingTaxProvision { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualSellingGeneralAndAdministration { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualGrossProfit { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualBasicEps { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualNetIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingPretaxIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingNetIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingInterestExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualTaxProvision { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualDilutedAverageShares { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualInterestExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualPretaxIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualNetIncomeCommonStockholders { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingTotalRevenue { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualBasicAverageShares { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingCostOfRevenue { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingOtherIncomeExpense { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingOperatingIncome { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualCostOfRevenue { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualResearchAndDevelopment { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingResearchAndDevelopment { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TrailingNetIncomeCommonStockholders { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualTotalRevenue { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type AnnualNetIncomeContinuousOperations { dataId: Int
  asOfDate: String
  periodType: String
  currencyCode: String
  reportedValue: ReportedValue }

type TimeSeries { timestamp: [Int ]
  trailingDilutedAverageShares: [String ]
  trailingDilutedEPS: [String ]
  trailingBasicEPS: [String ]
  trailingBasicAverageShares: [String ]
  annualDilutedEPS: [AnnualDilutedEps ]
  trailingSellingGeneralAndAdministration: [TrailingSellingGeneralAndAdministration ]
  annualOperatingExpense: [AnnualOperatingExpense ]
  trailingNetIncomeContinuousOperations: [TrailingNetIncomeContinuousOperations ]
  annualEbitda: [AnnualEbitda ]
  trailingOperatingExpense: [TrailingOperatingExpense ]
  annualOperatingIncome: [AnnualOperatingIncome ]
  trailingGrossProfit: [TrailingGrossProfit ]
  annualOtherIncomeExpense: [AnnualOtherIncomeExpense ]
  trailingTaxProvision: [TrailingTaxProvision ]
  annualSellingGeneralAndAdministration: [AnnualSellingGeneralAndAdministration ]
  annualGrossProfit: [AnnualGrossProfit ]
  annualBasicEPS: [AnnualBasicEps ]
  annualNetIncome: [AnnualNetIncome ]
  trailingPretaxIncome: [TrailingPretaxIncome ]
  trailingNetIncome: [TrailingNetIncome ]
  trailingInterestExpense: [TrailingInterestExpense ]
  annualTaxProvision: [AnnualTaxProvision ]
  annualDilutedAverageShares: [AnnualDilutedAverageShares ]
  annualInterestExpense: [AnnualInterestExpense ]
  annualPretaxIncome: [AnnualPretaxIncome ]
  annualNetIncomeCommonStockholders: [AnnualNetIncomeCommonStockholders ]
  trailingTotalRevenue: [TrailingTotalRevenue ]
  annualBasicAverageShares: [AnnualBasicAverageShares ]
  trailingCostOfRevenue: [TrailingCostOfRevenue ]
  trailingOtherIncomeExpense: [TrailingOtherIncomeExpense ]
  trailingOperatingIncome: [TrailingOperatingIncome ]
  annualCostOfRevenue: [AnnualCostOfRevenue ]
  annualResearchAndDevelopment: [AnnualResearchAndDevelopment ]
  trailingResearchAndDevelopment: [TrailingResearchAndDevelopment ]
  trailingNetIncomeCommonStockholders: [TrailingNetIncomeCommonStockholders ]
  annualTotalRevenue: [AnnualTotalRevenue ]
  annualNetIncomeContinuousOperations: [AnnualNetIncomeContinuousOperations ] }

type PageViews { shortTermTrend: String
  midTermTrend: String
  longTermTrend: String
  maxAge: Int }

type DayHigh { raw: Float fmt: String }

type BidSize { raw: Int fmt: String longFmt: String }

type DividendYield { raw: Float fmt: String }

type Bid { raw: Float fmt: String }

type FiftyTwoWeekLow { raw: Float fmt: String }

type FiveYearAvgDividendYield { raw: Float fmt: String }

type ForwardPe { raw: Float fmt: String }

type FiftyTwoWeekHigh { raw: Float fmt: String }

type Volume { raw: Int fmt: String longFmt: String }

type AskSize { raw: Int fmt: String longFmt: String }

type Ask { raw: Float fmt: String }

type DayLow { raw: Float fmt: String }

type PriceToSalesTrailing12Months { raw: Float fmt: String }

type AverageVolume { raw: Int fmt: String longFmt: String }

type MarketCap { raw: Int fmt: String longFmt: String }

type RegularMarketVolume { raw: Int fmt: String longFmt: String }

type TrailingPe { raw: Float fmt: String }

type PriceHint { raw: Int fmt: String longFmt: String }

type RegularMarketDayLow { raw: Float fmt: String }

type Beta { raw: Float fmt: String }

type ExDividendDate { raw: Int fmt: String }

type DividendRate { raw: Float fmt: String }

type AverageVolume10days { raw: Int fmt: String longFmt: String }

type Open { raw: Int fmt: String }

type TrailingAnnualDividendRate { raw: Float fmt: String }

type FiftyDayAverage { raw: Float fmt: String }

type RegularMarketPreviousClose { raw: Float fmt: String }

type AverageDailyVolume10Day { raw: Int fmt: String longFmt: String }

type RegularMarketDayHigh { raw: Float fmt: String }

type PayoutRatio { raw: Float fmt: String }

type TrailingAnnualDividendYield { raw: Float fmt: String }

type TwoHundredDayAverage { raw: Float fmt: String }

type RegularMarketOpen { raw: Int fmt: String }

type PreviousClose { raw: Float fmt: String }

type SummaryDetail { toCurrency: String
  algorithm: String
  currency: String
  lastMarket: String
  maxAge: Int
  fromCurrency: String
  tradeable: Boolean
  dayHigh: DayHigh
  bidSize: BidSize
  dividendYield: DividendYield
  bid: Bid
  fiftyTwoWeekLow: FiftyTwoWeekLow
  fiveYearAvgDividendYield: FiveYearAvgDividendYield
  forwardPE: ForwardPe
  fiftyTwoWeekHigh: FiftyTwoWeekHigh
  volume: Volume
  askSize: AskSize
  ask: Ask
  dayLow: DayLow
  priceToSalesTrailing12Months: PriceToSalesTrailing12Months
  averageVolume: AverageVolume
  marketCap: MarketCap
  regularMarketVolume: RegularMarketVolume
  trailingPE: TrailingPe
  priceHint: PriceHint
  regularMarketDayLow: RegularMarketDayLow
  beta: Beta
  exDividendDate: ExDividendDate
  dividendRate: DividendRate
  averageVolume10days: AverageVolume10days
  open: Open
  trailingAnnualDividendRate: TrailingAnnualDividendRate
  fiftyDayAverage: FiftyDayAverage
  regularMarketPreviousClose: RegularMarketPreviousClose
  averageDailyVolume10Day: AverageDailyVolume10Day
  regularMarketDayHigh: RegularMarketDayHigh
  payoutRatio: PayoutRatio
  trailingAnnualDividendYield: TrailingAnnualDividendYield
  twoHundredDayAverage: TwoHundredDayAverage
  regularMarketOpen: RegularMarketOpen
  previousClose: PreviousClose }

type QuoteType { exchange: String
  shortName: String
  longName: String
  exchangeTimezoneName: String
  exchangeTimezoneShortName: String
  isEsgPopulated: Boolean
  gmtOffSetMilliseconds: String
  quoteType: String
  symbol: String
  messageBoardId: String
  market: String }

type CapitalExpenditures { raw: Int fmt: String longFmt: String }

type ChangeToNetincome { raw: Int fmt: String longFmt: String }

type OtherCashflowsFromFinancingActivities { raw: Int fmt: String longFmt: String }

type ChangeToAccountReceivables { raw: Int fmt: String longFmt: String }

type ChangeToInventory { raw: Int fmt: String longFmt: String }

type DividendsPaid { raw: Int fmt: String longFmt: String }

type OtherCashflowsFromInvestingActivities { raw: Int fmt: String longFmt: String }

type Depreciation { raw: Int fmt: String longFmt: String }

type TotalCashFromOperatingActivities { raw: Int fmt: String longFmt: String }

type RepurchaseOfStock { raw: Int fmt: String longFmt: String }

type EndDate { raw: Int fmt: String }

type ChangeInCash { raw: Int fmt: String longFmt: String }

type NetIncome { raw: Int fmt: String longFmt: String }

type ChangeToOperatingActivities { raw: Int fmt: String longFmt: String }

type TotalCashFromFinancingActivities { raw: Int fmt: String longFmt: String }

type TotalCashflowsFromInvestingActivities { raw: Int fmt: String longFmt: String }

type ChangeToLiabilities { raw: Int fmt: String longFmt: String }

type Investments { raw: Int fmt: String longFmt: String }

type CashflowStatementHistoryQuarterly { maxAge: Int cashflowStatements: [CashflowStatements ] }

type AccountsPayable { raw: Int fmt: String longFmt: String }

type Inventory { raw: Int fmt: String longFmt: String }

type LongTermDebt { raw: Int fmt: String longFmt: String }

type NetReceivables { raw: Int fmt: String longFmt: String }

type ShortTermInvestments { raw: Int fmt: String longFmt: String }

type NetTangibleAssets { raw: Int fmt: String longFmt: String }

type LongTermInvestments { raw: Int fmt: String longFmt: String }

type TotalCurrentAssets { raw: Int fmt: String longFmt: String }

type PropertyPlantEquipment { raw: Int fmt: String longFmt: String }

type OtherStockholderEquity { raw: Int fmt: String longFmt: String }

type ShortLongTermDebt { raw: Int fmt: String longFmt: String }

type TotalCurrentLiabilities { raw: Int fmt: String longFmt: String }

type Cash { raw: Int fmt: String longFmt: String }

type OtherAssets { raw: Int fmt: String longFmt: String }

type TreasuryStock { raw: Int fmt: String longFmt: String }

type OtherLiab { raw: Int fmt: String longFmt: String }

type RetainedEarnings { raw: Int fmt: String longFmt: String }

type OtherCurrentAssets { raw: Int fmt: String longFmt: String }

type CommonStock { raw: Int fmt: String longFmt: String }

type TotalAssets { raw: Int fmt: String longFmt: String }

type OtherCurrentLiab { raw: Int fmt: String longFmt: String }

type TotalStockholderEquity { raw: Int fmt: String longFmt: String }

type TotalLiab { raw: Int fmt: String longFmt: String }

type BalanceSheetStatements { maxAge: Int
  accountsPayable: AccountsPayable
  inventory: Inventory
  longTermDebt: LongTermDebt
  netReceivables: NetReceivables
  shortTermInvestments: ShortTermInvestments
  netTangibleAssets: NetTangibleAssets
  longTermInvestments: LongTermInvestments
  totalCurrentAssets: TotalCurrentAssets
  propertyPlantEquipment: PropertyPlantEquipment
  otherStockholderEquity: OtherStockholderEquity
  shortLongTermDebt: ShortLongTermDebt
  totalCurrentLiabilities: TotalCurrentLiabilities
  cash: Cash
  otherAssets: OtherAssets
  treasuryStock: TreasuryStock
  otherLiab: OtherLiab
  retainedEarnings: RetainedEarnings
  otherCurrentAssets: OtherCurrentAssets
  commonStock: CommonStock
  endDate: EndDate
  totalAssets: TotalAssets
  otherCurrentLiab: OtherCurrentLiab
  totalStockholderEquity: TotalStockholderEquity
  totalLiab: TotalLiab }

type BalanceSheetHistory { maxAge: Int
  balanceSheetStatements: [BalanceSheetStatements ] }

type NetIncomeApplicableToCommonShares { raw: Int fmt: String longFmt: String }

type NetIncomeFromContinuingOps { raw: Int fmt: String longFmt: String }

type TotalOtherIncomeExpenseNet { raw: Int fmt: String longFmt: String }

type CostOfRevenue { raw: Int fmt: String longFmt: String }

type TotalOperatingExpenses { raw: Int fmt: String longFmt: String }

type TotalRevenue { raw: Int fmt: String longFmt: String }

type IncomeTaxExpense { raw: Int fmt: String longFmt: String }

type InterestExpense { raw: Int fmt: String longFmt: String }

type OperatingIncome { raw: Int fmt: String longFmt: String }

type Ebit { raw: Int fmt: String longFmt: String }

type GrossProfit { raw: Int fmt: String longFmt: String }

type SellingGeneralAdministrative { raw: Int fmt: String longFmt: String }

type IncomeBeforeTax { raw: Int fmt: String longFmt: String }

type ResearchDevelopment { raw: Int fmt: String longFmt: String }

type IncomeStatementHistory { maxAge: Int
  netIncomeApplicableToCommonShares: NetIncomeApplicableToCommonShares
  netIncomeFromContinuingOps: NetIncomeFromContinuingOps
  totalOtherIncomeExpenseNet: TotalOtherIncomeExpenseNet
  costOfRevenue: CostOfRevenue
  totalOperatingExpenses: TotalOperatingExpenses
  totalRevenue: TotalRevenue
  incomeTaxExpense: IncomeTaxExpense
  interestExpense: InterestExpense
  operatingIncome: OperatingIncome
  endDate: EndDate
  ebit: Ebit
  grossProfit: GrossProfit
  sellingGeneralAdministrative: SellingGeneralAdministrative
  netIncome: NetIncome
  incomeBeforeTax: IncomeBeforeTax
  researchDevelopment: ResearchDevelopment }

type IncomeStatementHistoryQuarterly { maxAge: Int
  incomeStatementHistory: [IncomeStatementHistory ] }

type RegularMarketChangePercent { raw: Float fmt: String }

type PostMarketChangePercent { raw: Float fmt: String }

type RegularMarketPrice { raw: Float fmt: String }

type PostMarketPrice { raw: Float fmt: String }

type PostMarketChange { raw: Float fmt: String }

type RegularMarketChange { raw: Float fmt: String }

type AverageDailyVolume3Month { raw: Int fmt: String longFmt: String }

type Price { quoteSourceName: String
  exchange: String
  regularMarketTime: Int
  shortName: String
  longName: String
  currencySymbol: String
  postMarketTime: Int
  exchangeDataDelayedBy: Int
  toCurrency: String
  exchangeName: String
  currency: String
  lastMarket: String
  regularMarketSource: String
  marketState: String
  underlyingSymbol: String
  quoteType: String
  postMarketSource: String
  symbol: String
  preMarketSource: String
  maxAge: Int
  fromCurrency: String
  regularMarketChangePercent: RegularMarketChangePercent
  postMarketChangePercent: PostMarketChangePercent
  marketCap: MarketCap
  regularMarketVolume: RegularMarketVolume
  regularMarketPrice: RegularMarketPrice
  priceHint: PriceHint
  regularMarketDayLow: RegularMarketDayLow
  postMarketPrice: PostMarketPrice
  postMarketChange: PostMarketChange
  regularMarketPreviousClose: RegularMarketPreviousClose
  regularMarketChange: RegularMarketChange
  averageDailyVolume10Day: AverageDailyVolume10Day
  regularMarketDayHigh: RegularMarketDayHigh
  averageDailyVolume3Month: AverageDailyVolume3Month
  regularMarketOpen: RegularMarketOpen }

type Revenue { raw: Int fmt: String longFmt: String }

type Quarterly { date: String earnings: Earnings revenue: Revenue }

type Yearly { date: Int earnings: Earnings revenue: Revenue }

type FinancialsChart { quarterly: [Quarterly ] yearly: [Yearly ] }

type EarningsDate { raw: Int fmt: String }

type CurrentQuarterEstimate { raw: Float fmt: String }

type Estimate { raw: Float fmt: String }

type Actual { raw: Float fmt: String }

type EarningsChart { currentQuarterEstimateDate: String
  currentQuarterEstimateYear: Int
  earningsDate: [EarningsDate ]
  currentQuarterEstimate: CurrentQuarterEstimate
  quarterly: [Quarterly ] }

type Earnings { maxAge: Int
  financialCurrency: String
  financialsChart: FinancialsChart
  earningsChart: EarningsChart }

type BalanceSheetHistoryQuarterly { maxAge: Int
  balanceSheetStatements: [BalanceSheetStatements ] }

type IssuanceOfStock { raw: Int fmt: String longFmt: String }

type NetBorrowings { raw: Int fmt: String longFmt: String }

type CashflowStatements { maxAge: Int
  capitalExpenditures: CapitalExpenditures
  changeToNetincome: ChangeToNetincome
  otherCashflowsFromFinancingActivities: OtherCashflowsFromFinancingActivities
  changeToAccountReceivables: ChangeToAccountReceivables
  changeToInventory: ChangeToInventory
  dividendsPaid: DividendsPaid
  otherCashflowsFromInvestingActivities: OtherCashflowsFromInvestingActivities
  depreciation: Depreciation
  totalCashFromOperatingActivities: TotalCashFromOperatingActivities
  repurchaseOfStock: RepurchaseOfStock
  endDate: EndDate
  changeInCash: ChangeInCash
  netIncome: NetIncome
  issuanceOfStock: IssuanceOfStock
  changeToOperatingActivities: ChangeToOperatingActivities
  totalCashFromFinancingActivities: TotalCashFromFinancingActivities
  netBorrowings: NetBorrowings
  totalCashflowsFromInvestingActivities: TotalCashflowsFromInvestingActivities
  changeToLiabilities: ChangeToLiabilities
  investments: Investments }

type CashflowStatementHistory { maxAge: Int cashflowStatements: [CashflowStatements ] }

type FinancialsTemplate { code: String maxAge: Int }

type AutogeneratedMainTypeFinance {
	symbol: String
  loading: Boolean
  errorList: [String ]
  meta: Meta
  timeSeries: TimeSeries
  pageViews: PageViews
  summaryDetail: SummaryDetail
  quoteType: QuoteType
  cashflowStatementHistoryQuarterly: CashflowStatementHistoryQuarterly
  balanceSheetHistory: BalanceSheetHistory
  incomeStatementHistory: IncomeStatementHistory
  incomeStatementHistoryQuarterly: IncomeStatementHistoryQuarterly
  price: Price
  earnings: Earnings
  balanceSheetHistoryQuarterly: BalanceSheetHistoryQuarterly
  cashflowStatementHistory: CashflowStatementHistory
  financialsTemplate: FinancialsTemplate }
